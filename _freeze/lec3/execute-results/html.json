{
  "hash": "85adb6158333a263a0686ffe51db0269",
  "result": {
    "markdown": "---\ntitle: \"Session 3 — Quarto Reports (Python)\"\nexecute: \n  eval: false\n  echo: false\n---\n\n\nBelow is a complete lecture package for **Session 3 --- Quarto Reports (Python)** (75 minutes). It includes: timed agenda, key talking points, an **in‑class lab with copy‑paste code cells (Colab‑friendly)**, and **homework with copy‑paste code**. This session produces a **parameterized EDA report** for multiple tickers and publishes it to **GitHub Pages**.\n\n> Assumptions: Students already have (from Sessions 1--2) a repo like `unified-stocks-teamX` in Drive (or they can create it now) and basic Git push workflow with a short‑lived token. Today focuses on Quarto.\n\n------------------------------------------------------------------------\n\n## Session 3 --- Quarto Reports (Python) --- 75 minutes\n\n### Learning goals\n\nBy the end of class, students can:\n\n1.  Create a **parameterized** Quarto report (`.qmd`) that runs Python code.\n2.  Render a report from **Colab** using the **Quarto CLI** (with caching).\n3.  Pass parameters on the command line to re‑render for different tickers/date ranges.\n4.  Configure a minimal Quarto **website** that builds to `docs/` and publish it via **GitHub Pages**.\n\n------------------------------------------------------------------------\n\n## Agenda (75 min)\n\n-   **(8 min)** Why Quarto for DS: literate programming, parameters, caching, publishing\n-   **(12 min)** Anatomy of a `.qmd`: YAML front matter, `params:`, code chunks, `execute:` options, figures\n-   **(35 min)** **In‑class lab**: install Quarto in Colab → create `_quarto.yml` → write `reports/eda.qmd` → render for AAPL/MSFT → output to `docs/`\n-   **(10 min)** GitHub Pages walkthrough + troubleshooting + homework briefing\n-   **(10 min)** Buffer for hiccups (first Quarto install/render often needs a minute)\n\n------------------------------------------------------------------------\n\n## Talking points (for your slides)\n\n**Why Quarto**\n\n-   One source of truth for code + prose + figures → reproducibility and explainability.\n-   Parameterization = fast re‑runs with different inputs (ticker/horizon).\n-   Publishing to GitHub Pages gives a permanent, shareable artifact.\n\n**Key concepts**\n\n-   **Front matter**:\n\n    -   `format:` controls HTML/PDF/RevealJS (we'll use HTML).\n    -   `execute:` controls caching, echo, warnings.\n    -   `params:` defines inputs; accessed as `params` dict in Python cells.\n\n-   **Performance**: enable `execute.cache: true` to avoid refetching/recomputing.\n\n-   **Publishing**: write to `docs/` then enable GitHub Pages (Settings → Pages → \"Deploy from a branch\" → `main` / `/docs`).\n\n**Ethics/footnote**\n\n-   Financial data EDA here is **educational** only; not trading advice.\n\n------------------------------------------------------------------------\n\n## In‑class lab (35 min)\n\n> **Instructor tip**: Ask students to follow step‑by‑step. If they didn't complete Session 2's clone, they can create a fresh folder under Drive and initialize a new GitHub repo afterward.\n\n### 0) Mount Drive and set repo paths\n\nRun each block as a separate Colab cell.\n\n::: {.cell}\n\n:::\n\n\n``` python\nfrom google.colab import drive\ndrive.mount('/content/drive', force_remount=True)\n\nREPO_OWNER = \"YOUR_GITHUB_USERNAME_OR_ORG\"  # <- change\nREPO_NAME  = \"unified-stocks-teamX\"         # <- change\nBASE_DIR   = \"/content/drive/MyDrive/dspt25\"\nREPO_DIR   = f\"{BASE_DIR}/{REPO_NAME}\"\nREPO_URL   = f\"https://github.com/{REPO_OWNER}/{REPO_NAME}.git\"\n\nimport pathlib, os, subprocess\npathlib.Path(BASE_DIR).mkdir(parents=True, exist_ok=True)\n\nif not pathlib.Path(REPO_DIR).exists():\n    !git clone {REPO_URL} {REPO_DIR}\nelse:\n    %cd {REPO_DIR}\n    !git pull --ff-only\n%cd {REPO_DIR}\n```\n\n### 1) Install Quarto CLI on Colab and verify\n\n``` python\n# Install Quarto CLI (one-time per Colab runtime)\n!wget -q https://quarto.org/download/latest/quarto-linux-amd64.deb -O /tmp/quarto.deb\n!dpkg -i /tmp/quarto.deb || apt-get -y -f install >/dev/null && dpkg -i /tmp/quarto.deb\n!quarto --version\n```\n\n### 2) Minimal project config: `_quarto.yml` (website to `docs/`)\n\n``` python\nfrom textwrap import dedent\nqproj = dedent(\"\"\"\\\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"Unified Stocks — EDA\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: reports/eda.qmd\n        text: EDA (parametrized)\n\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    code-fold: false\n\nexecute:\n  echo: true\n  warning: false\n  cache: true\n\"\"\")\nopen(\"_quarto.yml\",\"w\").write(qproj)\nprint(open(\"_quarto.yml\").read())\n```\n\nCreate a simple homepage:\n\n``` python\nindex = \"\"\"\\\n---\ntitle: \"Unified Stocks Project\"\n---\n\nWelcome! Use the navigation to view the EDA report.\n\n- **Stock set**: see `tickers_25.csv`\n- **Note**: Educational use only — no trading advice.\n\"\"\"\nopen(\"index.qmd\",\"w\").write(index)\nprint(open(\"index.qmd\").read())\n```\n\n### 3) Create the parameterized EDA report: `reports/eda.qmd`\n\n````` python\nimport os, pathlib\npathlib.Path(\"reports/figs\").mkdir(parents=True, exist_ok=True)\n\neda_qmd = \"\"\"\\\n---\ntitle: \"Stock EDA\"\nformat:\n  html:\n    toc: true\n    number-sections: false\nexecute:\n  echo: true\n  warning: false\n  cache: true\nparams:\n  symbol: \"AAPL\"\n  start_date: \"2018-01-01\"\n  end_date: \"\"\n  rolling: 20\n---\n\n::: callout-note\nThis report is parameterized. To change inputs without editing code, pass\n`-P symbol:MSFT -P start_date:2019-01-01 -P end_date:2025-08-01 -P rolling:30` to `quarto render`.\n:::\n\n## Setup\n\n::: {.cell}\n\n:::\n\n## Download and prepare data\n\n::: {.cell}\n\n:::\n\n## Price over time\n\n::: {.cell}\n\n:::\n\n## Daily log returns — histogram\n\n::: {.cell}\n\n:::\n\n## Rolling mean & volatility (window = {params.rolling})\n\n::: {.cell}\n\n:::\n\n## Summary table\n\n::: {.cell}\n\n:::\n\n> **Note**: Educational use only. This is not trading advice.\n> \"\"\"\n> open(\"reports/eda.qmd\",\"w\").write(eda\\_qmd)\n> print(\"Wrote reports/eda.qmd\")\n`````\n\n### 4) Render the report for one ticker (AAPL) and put outputs in `docs/`\n\n``` python\n# Single render with defaults (AAPL)\n!quarto render reports/eda.qmd --output-dir docs/\n```\n\nOpen the produced HTML (Colab file browser → `docs/reports/eda.html`). If the HTML is under `docs/reports/eda.html`, that's expected (Quarto keeps layout mirroring source folders).\n\n### 5) Render for multiple tickers by passing parameters\n\n``` python\n# Render for MSFT with custom dates and rolling window\n!quarto render reports/eda.qmd -P symbol:MSFT -P start_date:2019-01-01 -P end_date:2025-08-01 -P rolling:30 --output-dir docs/\n\n# Render for NVDA with a different window\n!quarto render reports/eda.qmd -P symbol:NVDA -P start_date:2018-01-01 -P end_date:2025-08-01 -P rolling:60 --output-dir docs/\n```\n\nThis will create `docs/reports/eda.html` for the last render (Quarto overwrites the same output path by default). If you want **separate pages per ticker**, render to different filenames:\n\n``` python\n# Example: write MSFT to docs/reports/eda-MSFT.html via project copy\nimport shutil, os\nshutil.copy(\"reports/eda.qmd\", \"reports/eda-MSFT.qmd\")\n!quarto render reports/eda-MSFT.qmd -P symbol:MSFT -P start_date:2019-01-01 -P end_date:2025-08-01 -P rolling:30 --output-dir docs/\n```\n\n### 6) Add nav links to specific ticker pages (optional)\n\n``` python\n# Append MSFT page to navbar\nfrom ruamel.yaml import YAML\nyaml = YAML()\ncfg = yaml.load(open(\"_quarto.yml\"))\ncfg[\"website\"][\"navbar\"][\"left\"].append({\"href\": \"reports/eda-MSFT.qmd\", \"text\": \"MSFT EDA\"})\nwith open(\"_quarto.yml\",\"w\") as f:\n    yaml.dump(cfg, f)\n!quarto render --output-dir docs/\n```\n\n### 7) Commit and push site to GitHub (so Pages can serve `docs/`)\n\n``` python\n!git add _quarto.yml index.qmd reports/eda*.qmd reports/figs docs\n!git status\n!git commit -m \"feat: add parameterized Quarto EDA and publish to docs/\"\n```\n\n``` python\n# Push using a short-lived fine-grained token (as in Session 2)\nfrom getpass import getpass\ntoken = getpass(\"GitHub token (not stored): \")\npush_url = f\"https://{token}@github.com/{REPO_OWNER}/{REPO_NAME}.git\"\n!git push {push_url} HEAD:main\ndel token\n```\n\n### 8) Enable GitHub Pages (one-time, UI)\n\n-   On GitHub: **Settings → Pages**\n\n    -   Source: **Deploy from a branch**\n    -   Branch: `main`\n    -   Folder: `/docs`\n\n-   Save. Wait \\~1--3 minutes. Your site will be live at the URL GitHub shows (usually `https://<owner>.github.io/<repo>/`).\n\n------------------------------------------------------------------------\n\n## Wrap‑up (10 min)\n\n-   Re‑rendering with `-P` lets you build many variants quickly.\n-   Keep **data fetches cached** and/or saved to files to speed up renders.\n-   Your team can add more pages (e.g., *Methodology*, *Results*, *Model Card*) and link them via `_quarto.yml`.\n\n------------------------------------------------------------------------\n\n## Homework (due before Session 4)\n\n**Goal:** Enhance the EDA report with two features and publish distinct pages for **three** tickers from `tickers_25.csv`.\n\n### Part A --- Add drawdown & simple regime shading\n\n1.  Edit `reports/eda.qmd`. After computing `df[\"log_return\"]`, compute:\n\n    -   `cum_return` and **drawdown**\n    -   A simple **volatility regime** indicator (e.g., rolling std quantiles)\n\n``` python\n# Add to the \"Tidy & features\" section in eda.qmd\ndf[\"cum_return\"] = df[\"log_return\"].cumsum().fillna(0.0)\npeak = df[\"cum_return\"].cummax()\ndf[\"drawdown\"] = df[\"cum_return\"] - peak\n\n# Regime via rolling volatility terciles\nvol = df[\"log_return\"].rolling(ROLL, min_periods=ROLL//2).std()\nq1, q2 = vol.quantile([0.33, 0.66])\ndef regime(v):\n    if np.isnan(v): return \"mid\"\n    return \"low\" if v < q1 else (\"high\" if v > q2 else \"mid\")\ndf[\"regime\"] = [regime(v) for v in vol]\ndf[\"regime\"].value_counts().to_frame(\"days\").T\n```\n\n2.  Add a **drawdown plot** and shade high‑volatility regimes:\n\n``` python\n# Drawdown plot\nfig, ax = plt.subplots(figsize=(8,3))\nax.plot(df.index, df[\"drawdown\"])\nax.set_title(f\"{SYMBOL} — Drawdown (log-return cumulative)\")\nax.set_xlabel(\"Date\"); ax.set_ylabel(\"drawdown\")\nfig.tight_layout()\nfigpath = Path(\"reports/figs\")/f\"{SYMBOL}_drawdown.png\"\nfig.savefig(figpath, dpi=144)\nfigpath\n```\n\n``` python\n# Price with regime shading (simple)\nfig, ax = plt.subplots(figsize=(8,3))\nax.plot(df.index, df[\"close\"])\nax.set_title(f\"{SYMBOL} — Price with High-Volatility Shading\")\nax.set_xlabel(\"Date\"); ax.set_ylabel(\"Price\")\n\n# Shade where regime == 'high'\nmask = (df[\"regime\"] == \"high\")\n# merge contiguous regions\nin_region = False\nstart = None\nfor i, (ts, is_high) in enumerate(zip(df.index, mask)):\n    if is_high and not in_region:\n        in_region = True\n        start = ts\n    if in_region and (not is_high or i == len(df)-1):\n        end = df.index[i-1] if not is_high else ts\n        ax.axvspan(start, end, alpha=0.15)  # shaded band\n        in_region = False\nfig.tight_layout()\nfigpath = Path(\"reports/figs\")/f\"{SYMBOL}_price_regimes.png\"\nfig.savefig(figpath, dpi=144)\nfigpath\n```\n\n### Part B --- Render three separate pages and link them in the navbar\n\n1.  Make copies of the report source so each produces its own page:\n\n``` python\nimport shutil\nshutil.copy(\"reports/eda.qmd\", \"reports/eda-AAPL.qmd\")\nshutil.copy(\"reports/eda.qmd\", \"reports/eda-MSFT.qmd\")\nshutil.copy(\"reports/eda.qmd\", \"reports/eda-NVDA.qmd\")\n```\n\n2.  Render each with different parameters:\n\n``` python\n!quarto render reports/eda-AAPL.qmd -P symbol:AAPL -P start_date:2018-01-01 -P end_date:2025-08-01 -P rolling:30 --output-dir docs/\n!quarto render reports/eda-MSFT.qmd -P symbol:MSFT -P start_date:2018-01-01 -P end_date:2025-08-01 -P rolling:30 --output-dir docs/\n!quarto render reports/eda-NVDA.qmd -P symbol:NVDA -P start_date:2018-01-01 -P end_date:2025-08-01 -P rolling:30 --output-dir docs/\n```\n\n3.  Add to the navbar in `_quarto.yml` and rebuild site:\n\n``` python\nfrom ruamel.yaml import YAML\nyaml = YAML()\ncfg = yaml.load(open(\"_quarto.yml\"))\ncfg[\"website\"][\"navbar\"][\"left\"].extend([\n  {\"href\": \"reports/eda-AAPL.qmd\", \"text\": \"AAPL\"},\n  {\"href\": \"reports/eda-MSFT.qmd\", \"text\": \"MSFT\"},\n  {\"href\": \"reports/eda-NVDA.qmd\", \"text\": \"NVDA\"},\n])\nwith open(\"_quarto.yml\",\"w\") as f:\n    yaml.dump(cfg, f)\n!quarto render --output-dir docs/\n```\n\n4.  Commit & push (use your short‑lived token as before):\n\n``` python\n!git add reports/eda-*.qmd reports/figs _quarto.yml docs\n!git commit -m \"feat: EDA enhancements (drawdown/regimes) and pages for AAPL/MSFT/NVDA\"\n```\n\n``` python\nfrom getpass import getpass\ntoken = getpass(\"GitHub token (not stored): \")\npush_url = f\"https://{token}@github.com/{REPO_OWNER}/{REPO_NAME}.git\"\n!git push {push_url} HEAD:main\ndel token\n```\n\n5.  Verify **GitHub Pages** shows navbar links and pages load.\n\n### Part C --- Makefile convenience targets\n\nAppend these to your project `Makefile`:\n\n``` make\nreport:\n\\tquarto render reports/eda.qmd --output-dir docs/\n\nreports-trio:\n\\tquarto render reports/eda-AAPL.qmd -P symbol:AAPL -P start_date:2018-01-01 -P end_date:2025-08-01 --output-dir docs/\n\\tquarto render reports/eda-MSFT.qmd -P symbol:MSFT -P start_date:2018-01-01 -P end_date:2025-08-01 --output-dir docs/\n\\tquarto render reports/eda-NVDA.qmd -P symbol:NVDA -P start_date:2018-01-01 -P end_date:2025-08-01 --output-dir docs/\n```\n\n> On Colab, running `make` requires `make` to be available (it is). Otherwise, keep using `quarto render` commands.\n\n### Grading (pass/revise)\n\n-   `reports/eda.qmd` renders with parameters and caching enabled.\n-   At least **three** ticker pages rendered and linked in navbar.\n-   Drawdown and simple regime shading working on the EDA page(s).\n-   Site published via GitHub Pages (`docs/` present on `main` and live).\n\n------------------------------------------------------------------------\n\n## Instructor checklist (before class)\n\n-   Test the Quarto install/render flow once in a fresh Colab runtime.\n-   Have a screenshot of: `_quarto.yml`, rendered `docs/` tree, GitHub Pages settings.\n-   Remind students: if `yfinance` rate‑limits, re‑run or wait; the synthetic fallback ensures the page renders.\n\n## Emphasize while teaching\n\n-   **Parameters** make reports reusable; don't copy‑paste notebooks for each ticker.\n-   **Cache** for speed; **docs/** for Pages.\n-   Keep figures saved under `reports/figs/` and referenced in the report.\n-   Keep secrets out of the repo; EDA uses public data only.\n\nNext time (Session 4): a quick **RStudio Quarto cameo** and more **report hygiene** (citations, figure captions, alt text), then into **Unix automation**.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}