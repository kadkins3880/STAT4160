{
  "hash": "7eee056d67bbfe20ea1827825b1666ed",
  "result": {
    "markdown": "---\ntitle: \"Session 4 — RStudio Quarto cameo + Report Hygiene\"\n---\n\nBelow is a complete lecture package for **Session 4 — RStudio Quarto cameo + Report Hygiene** (75 minutes). It includes: a timed agenda, slide talking points, a **Colab‑friendly in‑class lab with copy‑paste code**, and **homework with copy‑paste code**. The goal is to make your Quarto site **clean, citable, accessible, and reproducible**—and to show (briefly) that **RStudio can render your Python‑based Quarto project**.\n\n> **Assumptions:**\n>\n> * Students already have a repo (e.g., `unified-stocks-teamX`) with the Quarto site scaffolding from Sessions 2–3.\n> * Python‑first course; the **RStudio cameo** demonstrates that Quarto is editor‑agnostic (no R coding required).\n\n---\n\n## Session 4 — RStudio cameo + Report Hygiene (75 min)\n\n### Learning goals\n\nBy the end of class, students can:\n\n1. Render a **Python‑only** Quarto report from **RStudio** (or RStudio Cloud) as a proof that Quarto is editor‑agnostic.\n2. Add **hygiene features** to the project: citations (`references.bib`), figure/table **captions + cross‑references**, **alt text**, better site navigation, custom CSS, and **freeze/caching** for reproducibility.\n3. Produce a **Data Dictionary** section that documents columns and dtypes, and reference it from the EDA page.\n4. Render & publish the cleaned site to **GitHub Pages**.\n\n---\n\n## Agenda (75 min)\n\n* **(10 min)** Why report hygiene matters (credibility, accessibility, reusability)\n* **(15 min)** **RStudio cameo**: Render the Python‑based Quarto report in RStudio\n* **(30 min)** **In‑class lab** (Colab): add citations, cross‑refs, alt text, freeze/caching, CSS, data dictionary, rebuild site\n* **(10 min)** Wrap‑up + troubleshooting + homework briefing\n* **(10 min)** Buffer (for first‑time installs or Git pushes)\n\n---\n\n## Slides / talking points\n\n### Why hygiene?\n\n* **Credibility:** citations + model/report lineage\n* **Accessibility:** alt text, readable fonts, color‑safe figures\n* **Reusability:** parameters, freeze/caching, stable page links\n* **Assessability:** clear captions, labeled figures & tables, cross‑references\n\n### Quarto features we’ll use\n\n* **Captions & labels**: `#| label: fig-price`, `#| fig-cap: \"Price over time\"` → reference in text with `@fig-price`\n* **Tables**: `#| label: tbl-summary`, `#| tbl-cap: \"Summary statistics\"` → reference with `@tbl-summary`\n* **Alt text**: `#| fig-alt: \"One‑sentence description of the figure\"`\n* **Citations**: add `bibliography: references.bib` and cite with `[@key]`\n* **Freeze**: project‑level `freeze: auto` for deterministic rebuilds\n* **Cache**: `execute: cache: true` to avoid redoing expensive steps\n* **CSS**: small tweaks to readability (font size, code block width)\n\n### RStudio cameo (no R required)\n\n* RStudio integrates Quarto; the **Render** button runs `quarto render` under the hood.\n* Your `.qmd` can be Python‑only; RStudio is just the IDE.\n\n---\n\n## RStudio cameo (15 min, live demo steps)\n\n> Do this on the projector. Students observe; they can try later on their machines or RStudio Cloud.\n\n1. **Open RStudio** (Desktop or Cloud).\n2. **File → Open Project** and select your repo folder (`unified-stocks-teamX`).\n3. Confirm Quarto: **Help → About Quarto** (or run `quarto --version` in the RStudio terminal).\n4. Open `reports/eda.qmd`. Click **Render** (or run `quarto render reports/eda.qmd`).\n5. Show the generated HTML preview. Note: no R code, just Python chunks.\n6. Mention that **RMarkdown** is the predecessor; **Quarto** unifies Python & R (and more). We use **Quarto**.\n\n---\n\n## In‑class lab (30 min, Colab‑friendly)\n\n> We’ll: ensure Quarto CLI is present, upgrade `_quarto.yml` (freeze, bibliography, CSS), add `references.bib`, **rewrite EDA with captions/labels/alt text**, generate a **Data Dictionary**, re‑render, and push to GitHub.\n\n### 0) Mount Drive, set repo path, and ensure Quarto CLI\n\n```python\nfrom google.colab import drive\ndrive.mount('/content/drive', force_remount=True)\n\nREPO_OWNER = \"YOUR_GITHUB_USERNAME_OR_ORG\"  # <- change\nREPO_NAME  = \"unified-stocks-teamX\"         # <- change\nBASE_DIR   = \"/content/drive/MyDrive/dspt25\"\nREPO_DIR   = f\"{BASE_DIR}/{REPO_NAME}\"\nREPO_URL   = f\"https://github.com/{REPO_OWNER}/{REPO_NAME}.git\"\n\nimport pathlib, os\npathlib.Path(BASE_DIR).mkdir(parents=True, exist_ok=True)\n\nif not pathlib.Path(REPO_DIR).exists():\n    !git clone {REPO_URL} {REPO_DIR}\n%cd {REPO_DIR}\n\n# Ensure Quarto CLI\n!quarto --version || (wget -q https://quarto.org/download/latest/quarto-linux-amd64.deb -O /tmp/quarto.deb && dpkg -i /tmp/quarto.deb || (apt-get -y -f install >/dev/null && dpkg -i /tmp/quarto.deb))\n!quarto --version\n```\n\n### 1) Upgrade `_quarto.yml`: freeze, bibliography, CSS, nav polish\n\n```python\n# Install ruamel.yaml for safe YAML edits\n!pip -q install ruamel.yaml\n\nfrom ruamel.yaml import YAML\nfrom pathlib import Path\n\nyaml = YAML()\ncfg_path = Path(\"_quarto.yml\")\nif cfg_path.exists():\n    cfg = yaml.load(cfg_path.read_text())\nelse:\n    cfg = {\"project\": {\"type\": \"website\", \"output-dir\": \"docs\"},\n           \"website\": {\"title\": \"Unified Stocks\", \"navbar\": {\"left\": [{\"href\":\"index.qmd\",\"text\":\"Home\"}]}},\n           \"format\":{\"html\":{\"theme\":\"cosmo\",\"toc\":True}}}\n\n# Add/ensure features\ncfg.setdefault(\"format\", {}).setdefault(\"html\", {})\ncfg[\"format\"][\"html\"][\"toc\"] = True\ncfg[\"format\"][\"html\"][\"code-fold\"] = False\ncfg[\"format\"][\"html\"][\"toc-depth\"] = 2\ncfg[\"format\"][\"html\"][\"page-navigation\"] = True\ncfg[\"format\"][\"html\"][\"code-tools\"] = True\ncfg[\"format\"][\"html\"][\"fig-cap-location\"] = \"bottom\"\ncfg[\"format\"][\"html\"][\"tbl-cap-location\"] = \"top\"\ncfg[\"format\"][\"html\"][\"css\"] = \"docs/style.css\"\n\ncfg.setdefault(\"execute\", {})\ncfg[\"execute\"][\"echo\"] = True\ncfg[\"execute\"][\"warning\"] = False\ncfg[\"execute\"][\"cache\"] = True\n\n# Freeze: deterministic rebuilds until the source changes\ncfg[\"project\"][\"freeze\"] = \"auto\"\n\n# Bibliography\ncfg[\"bibliography\"] = \"references.bib\"\n\n# Ensure navbar has EDA link\nnav = cfg.setdefault(\"website\", {}).setdefault(\"navbar\", {}).setdefault(\"left\", [])\nif not any(item.get(\"href\") == \"reports/eda.qmd\" for item in nav if isinstance(item, dict)):\n    nav.append({\"href\": \"reports/eda.qmd\", \"text\": \"EDA\"})\n\nyaml.dump(cfg, open(\"_quarto.yml\",\"w\"))\nprint(open(\"_quarto.yml\").read())\n```\n\n### 2) Add `references.bib` (sample entries; students will refine later)\n\n```python\nrefs = r\"\"\"@book{hyndman-fpp3,\n  title = {Forecasting: Principles and Practice},\n  author = {Hyndman, Rob J. and Athanasopoulos, George},\n  edition = {3},\n  year = {2021},\n  url = {https://otexts.com/fpp3/}\n}\n@misc{quarto-docs,\n  title = {Quarto Documentation},\n  author = {{Posit}},\n  year = {2025},\n  url = {https://quarto.org/}\n}\n@misc{yfinance,\n  title = {yfinance: Yahoo! Finance market data downloader},\n  author = {Ran Aroussi},\n  year = {2024},\n  url = {https://github.com/ranaroussi/yfinance}\n}\n\"\"\"\nopen(\"references.bib\",\"w\").write(refs)\nprint(open(\"references.bib\").read())\n```\n\n### 3) Overwrite `reports/eda.qmd` with captions, labels, alt text, citations, and cross‑refs\n\n> This replaces the earlier EDA with a hygienic version. Feel free to adjust wording later.\n\n````python\nfrom textwrap import dedent\neda = dedent(\"\"\"\\\n---\ntitle: \"Stock EDA\"\nformat:\n  html:\n    toc: true\n    number-sections: false\nexecute:\n  echo: true\n  warning: false\n  cache: true\nparams:\n  symbol: \"AAPL\"\n  start_date: \"2018-01-01\"\n  end_date: \"\"\n  rolling: 20\n---\n\n> *Educational use only — not trading advice.* Data pulled via **yfinance** [@yfinance].\n\nThis page is **parameterized**; see the **Parameters** section for usage.\n\n## Setup\n\n::: {.cell execution_count=1}\n````` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport yfinance as yf\nfrom pathlib import Path\n\nSYMBOL = params.get(\"symbol\", \"AAPL\")\nSTART  = params.get(\"start_date\", \"2018-01-01\")\nEND    = params.get(\"end_date\", \"\")\nROLL   = int(params.get(\"rolling\", 20))\nif not END:\n  END = pd.Timestamp.today().strftime(\"%Y-%m-%d\")\n````\n\n## Download and tidy\n\n\n\n```{python}\n#| echo: true\ntry:\n  data = yf.download(SYMBOL, start=START, end=END, auto_adjust=True, progress=False)\nexcept Exception as e:\n  # Synthetic fallback\n  idx = pd.bdate_range(START, END)\n  rng = np.random.default_rng(42)\n  ret = rng.normal(0, 0.01, len(idx))\n  price = 100 * np.exp(np.cumsum(ret))\n  vol = rng.integers(1e5, 5e6, len(idx))\n  data = pd.DataFrame({\"Close\": price, \"Volume\": vol}, index=idx)\n\ndf = (data.rename(columns=str.lower)[[\"close\",\"volume\"]]\n        .dropna()\n        .assign(log_return=lambda d: np.log(d[\"close\"]).diff()))\ndf[\"roll_mean\"] = df[\"log_return\"].rolling(ROLL, min_periods=ROLL//2).mean()\ndf[\"roll_vol\"]  = df[\"log_return\"].rolling(ROLL, min_periods=ROLL//2).std()\ndf = df.dropna()\n`````\n:::\n\n\n## Price over time\n\n\n\nAs shown in **Figure @fig-price**, prices vary over time with changing volatility.\n\n## Return distribution\n\n\n\n**Figure @fig-hist** shows the return distribution; many assets exhibit heavy tails \\[@hyndman-fpp3, pp. 20–21].\n\n## Rolling statistics (window = {params.rolling})\n\n\n\n## Summary table\n\n\n\nSee **Table @tbl-summary** for overall statistics.\n\n## Data dictionary\n\n\n\n## Parameters\n\nThis page accepts parameters: `symbol`, `start_date`, `end_date`, and `rolling`. You can re‑render with:\n\n```\nquarto render reports/eda.qmd \\\\\n  -P symbol:MSFT -P start_date:2019-01-01 -P end_date:2025-08-01 -P rolling:30\n```\n\n## References\n\n\"\"\")\nopen(\"reports/eda.qmd\",\"w\").write(eda)\nprint(\"Wrote reports/eda.qmd with hygiene features.\")\n\n````\n\n### 4) Add a minimal CSS for readability\n```python\nfrom pathlib import Path\nPath(\"docs\").mkdir(exist_ok=True)\ncss = \"\"\"\\\n/* Increase base font and widen code blocks slightly */\nbody { font-size: 1.02rem; }\npre code { white-space: pre-wrap; }\nimg { max-width: 100%; height: auto; }\n\"\"\"\nopen(\"docs/style.css\",\"w\").write(css)\nprint(\"Wrote docs/style.css\")\n````\n\n### 5) Render site to `docs/` and preview\n\n```python\n!quarto render --output-dir docs/\n```\n\nOpen `docs/reports/eda.html` in the Colab file browser to preview. Confirm:\n\n* Captions under figures, tables titled at top\n* Cross‑refs like “Figure 1”/“Table 1” clickable\n* “References” section at bottom with your 2–3 entries\n\n### 6) Commit and push (short‑lived token method)\n\n```python\n!git add _quarto.yml references.bib reports/eda.qmd docs/style.css docs/\n!git commit -m \"chore: report hygiene (captions, cross-refs, alt text, freeze, bibliography, CSS)\"\n```\n\n```python\nfrom getpass import getpass\ntoken = getpass(\"GitHub token (not stored): \")\npush_url = f\"https://{token}@github.com/{REPO_OWNER}/{REPO_NAME}.git\"\n!git push {push_url} HEAD:main\ndel token\n```\n\n---\n\n## Wrap‑up (10 min)\n\n* Your report now has **citations**, **captions**, **cross‑refs**, **alt text**, and **frozen** outputs for stable rebuilds.\n* RStudio can render the exact same Python‑based `.qmd`. Teams can mix editors without friction.\n* Next: Unix automation and Makefile targets to run reports end‑to‑end.\n\n---\n\n## Homework (due before Session 5)\n\n**Goal:** Extend hygiene and add one analytic section—**ACF plot**—with proper captions/labels/alt text/citations.\n\n### Part A — Add an ACF figure with cross‑ref + alt text\n\nAppend this code chunk to `reports/eda.qmd` after the “Rolling statistics” section:\n\n````python\n\n\n\n```python\nfrom getpass import getpass\ntoken = getpass(\"GitHub token (not stored): \")\npush_url = f\"https://{token}@github.com/{REPO_OWNER}/{REPO_NAME}.git\"\n!git push {push_url} HEAD:main\ndel token\n```\n\n### Grading (pass/revise)\n\n* EDA page includes **ACF figure** with caption, label, and alt text; cross‑referenced in text.\n* **Monthly returns** table present with caption/label; referenced in text.\n* **At least two** new, relevant citations included and rendered under References.\n* `freeze` and `cache` enabled; site renders to `docs/` and loads on GitHub Pages.\n\n---\n\n## Instructor checklist (before class)\n\n* Confirm Quarto CLI install on your demo environment.\n* Ensure you can open an existing Python‑only `.qmd` in RStudio and click **Render** successfully.\n* Have a GitHub Pages site ready to show before/after hygiene improvements.\n\n## Emphasize while teaching\n\n* **Accessibility** is part of professionalism: always write **alt text**, don’t rely on color alone, and keep captions informative.\n* **Citations** are not optional for serious work; treat the report like a short paper.\n* **Freeze + cache** save time and prevent accidental drift.\n* RStudio is a **comfortable alternative editor** for Quarto even in a Python‑only workflow.\n\nNext up (Session 5): **Unix for data work**—shell power tools and Make automation to glue everything together.\n\n",
    "supporting": [
      "lec4_files\\figure-pdf"
    ],
    "filters": []
  }
}