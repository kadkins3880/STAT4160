---
title: "pre‑commit & GitHub Actions CI"
---

Below is a complete lecture package for **Session 14 — pre‑commit & GitHub Actions CI** (75 minutes). It includes a timed agenda, slide talking points, a **Colab‑friendly in‑class lab with copy‑paste code**, and **homework with copy‑paste code**. By the end, your repo will (1) enforce **style and lint** automatically with **pre‑commit** (Black, Ruff, nbstripout), and (2) run **CI** on every PR with a fast GitHub Actions workflow that lints and runs tests in under \~3–4 minutes.

> **Assumptions:** You completed Session 13 and have a repo in Drive (e.g., `unified-stocks-teamX`) with a small test suite (`pytest`) and Parquet data present locally. Colab + Drive workflow assumed.
> **Goals today:** Make code quality and basic data tests automatic and repeatable in CI.

---

## Session 14 — pre‑commit & GitHub Actions CI (75 min)

### Learning goals

Students will be able to:

1. Configure **pre‑commit** to run **Black**, **Ruff** (lint + import sort), and **nbstripout** on every commit.
2. Keep commits clean and **notebook outputs stripped**.
3. Add a fast **GitHub Actions** CI workflow that runs pre‑commit hooks and **pytest** on each PR.
4. Keep CI runtime **under \~3–4 minutes** with caching and a lean dependency set.

---

## Agenda (75 min)

* **(10 min)** Slides: why pre‑commit; the “quality gate”; anatomy of a fast CI
* **(10 min)** Slides: Black vs Ruff; when nbstripout matters; what belongs in CI
* **(35 min)** **In‑class lab**: configure pre‑commit (Black, Ruff, nbstripout) → run locally → add CI workflow → local dry‑run
* **(10 min)** Wrap‑up + homework briefing
* **(10 min)** Buffer

---

## Main points

**Why pre‑commit?**

* Prevent “drive‑by” problems before they enter history: unformatted code, stray notebook outputs, trailing whitespace.
* Hooks run **locally on commit**, then again in **CI** for defense‑in‑depth.

**Black & Ruff**

* **Black**: opinionated formatter → consistent diffs; no bikeshedding.
* **Ruff**: very fast linter (flake8 family), plus **import sorting**; can also fix many issues (`--fix`).
* You can use **both** (common) or let Ruff handle formatting too; we’ll use both for clarity.

**nbstripout**

* Remove cell outputs from notebooks to keep diffs small, avoid binary bloat, and reduce CI time.
* Two patterns: **pre‑commit hook** (recommended) and/or **git filter** (`nbstripout --install`).

**CI scope (fast!)**

* Lint + tests only; **no heavy training** in CI.
* Cache dependencies; pin Python (3.11+).
* Keep tests deterministic and **< \~5s** (already done in Session 13).

---

## In‑class lab (35 min, Colab‑friendly)

> Run each block as its **own Colab cell**. Update `REPO_NAME` to your repo. The cells create and modify files inside your repo.

### 0) Mount Drive & go to repo

```python
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

REPO_NAME  = "unified-stocks-teamX"  # <- change if needed
BASE_DIR   = "/content/drive/MyDrive/dspt25"
REPO_DIR   = f"{BASE_DIR}/{REPO_NAME}"

import os, pathlib
pathlib.Path(REPO_DIR).mkdir(parents=True, exist_ok=True)
os.chdir(REPO_DIR)
for p in [".github/workflows","tests","scripts","reports"]:
    pathlib.Path(p).mkdir(parents=True, exist_ok=True)
print("Working dir:", os.getcwd())
```

### 1) Install tools locally (for this Colab runtime)

```python
!pip -q install pre-commit black ruff nbstripout pytest
```

### 2) Add **tool config** to `pyproject.toml` (Black + Ruff)

> If you don’t have a `pyproject.toml`, this cell will create a minimal one; otherwise it appends/updates sections.

```python
from pathlib import Path
import textwrap, re

pyproj = Path("pyproject.toml")
existing = pyproj.read_text() if pyproj.exists() else ""

def upsert(section_header, body):
    global existing
    pattern = rf"(?ms)^\[{re.escape(section_header)}\]\s*.*?(?=^\[|\Z)"
    if re.search(pattern, existing):
        existing = re.sub(pattern, f"[{section_header}]\n{body}\n", existing)
    else:
        existing += f"\n[{section_header}]\n{body}\n"

# Black
upsert("tool.black", textwrap.dedent("""
line-length = 88
target-version = ["py311"]
""").strip())

# Ruff (modern layout)
upsert("tool.ruff", textwrap.dedent("""
line-length = 88
target-version = "py311"
""").strip())

upsert("tool.ruff.lint", textwrap.dedent("""
select = ["E","F","I"]  # flake8 errors, pyflakes, import sort
ignore = ["E501"]       # let Black handle line length
""").strip())

upsert("tool.ruff.lint.isort", textwrap.dedent("""
known-first-party = ["projectname"]
""").strip())

pyproj.write_text(existing.strip()+"\n")
print(pyproj.read_text())
```

### 3) Create `.pre-commit-config.yaml` with hooks (Black, Ruff, nbstripout)

> Versions below are stable at time of writing—feel free to bump later.

```python
from pathlib import Path
cfg = Path(".pre-commit-config.yaml")
cfg.write_text("""repos:
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        language_version: python3.11

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.5.0
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format

  - repo: https://github.com/kynan/nbstripout
    rev: 0.7.1
    hooks:
      - id: nbstripout
        files: \\.ipynb$

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: check-yaml
      - id: check-added-large-files
""")
print(cfg.read_text())
```

### 4) Install the local git hook & run on all files

```python
!pre-commit install
!pre-commit run --all-files
```

> The first run will **download** hook toolchains (Black, Ruff, etc.), format files, and strip notebook outputs. Commit changes after verifying.

### 5) (Optional) Also install **git filter** for nbstripout

> This is an extra layer; pre‑commit hook above already strips outputs. Use this to guarantee outputs are removed even when bypassing pre‑commit.

```python
!nbstripout --install --attributes .gitattributes
print(open(".gitattributes").read())
```

### 6) Add a tiny “bad style” file to see hooks in action

```python
from pathlib import Path
p = Path("scripts/bad_style.py")
p.write_text("import os,sys\n\n\ndef add(a,b):\n  return(a +  b)\n")
print("Wrote:", p)

# Run hooks just on this file
!pre-commit run --files scripts/bad_style.py
print(open("scripts/bad_style.py").read())
```

> You should see Black and Ruff fix spacing/imports; trailing whitespace hooks may also fire.

### 7) Add a fast **GitHub Actions CI** workflow (`.github/workflows/ci.yml`)

> This runs pre‑commit and your tests on Ubuntu with Python 3.11, with pip caching.

```python
from pathlib import Path
wf = Path(".github/workflows/ci.yml")
wf.write_text("""name: CI
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pre-commit pytest

      # Run pre-commit (Black, Ruff, nbstripout, etc.)
      - name: pre-commit
        uses: pre-commit/action@v3.0.1

      # Run tests (fast only)
      - name: pytest
        run: pytest -q --maxfail=1
""")
print(wf.read_text())
```

### 8) Add a `Makefile` convenience (optional but nice)

```python
from pathlib import Path
mk = Path("Makefile")
text = mk.read_text() if mk.exists() else ""
if "lint" not in text:
    text += """

.PHONY: lint test ci-local
lint: ## Run pre-commit hooks on all files
\tpre-commit run --all-files

test: ## Run fast tests
\tpytest -q --maxfail=1

ci-local: lint test ## Simulate CI locally
"""
    mk.write_text(text)
print(mk.read_text())
```

---

## Wrap‑up (10 min)

* You configured **pre‑commit** with **Black**, **Ruff** (lint + import sort), and **nbstripout** to keep the repo clean.
* You added a fast **CI** that runs the same hooks plus **pytest** on every PR.
* CI time stays small due to **caching** and a **lean dependency set**; tests are fast by design (Session 13).

---

## Homework (due before next session)

**Goal:** Prove the workflow works end‑to‑end with a green PR from a **fresh clone**.

### Part A — Fresh‑clone smoke test (local)

```bash
# On your laptop or a new Colab session:
git clone https://github.com/YOUR_USER/unified-stocks-teamX.git
cd unified-stocks-teamX
python -m pip install -U pip
pip install pre-commit pytest
pre-commit install
pre-commit run --all-files
pytest -q --maxfail=1
```

### Part B — Open a PR that turns CI green

1. **Create a branch** and make a tiny, style‑breaking change, then commit and let pre‑commit fix it automatically.

   ```bash
   git checkout -b chore/ci-badge-and-hooks
   echo "# Tiny edit  " >> README.md   # trailing spaces (will be fixed)
   git add -A
   git commit -m "chore: add CI badge + enable pre-commit hooks"
   git push -u origin chore/ci-badge-and-hooks
   ```
2. **Add a CI badge** to `README.md`:

   ```markdown
   ![CI](https://github.com/YOUR_USER/unified-stocks-teamX/actions/workflows/ci.yml/badge.svg)
   ```
3. Open a **Pull Request** on GitHub. Verify that:

   * The **pre‑commit** step passes.
   * **pytest** passes.
   * Total runtime is **< \~3–4 minutes**.
4. Merge once green. (If red, fix locally; do *not* disable hooks.)

### Part C — (Optional) Tune Ruff + Black to your taste

* In `pyproject.toml`, try:

  ```toml
  [tool.black]
  line-length = 100

  [tool.ruff]
  line-length = 100

  [tool.ruff.lint]
  select = ["E","F","I","B"]  # enable flake8-bugbear
  ignore = ["E501"]
  ```
* Run `pre-commit run --all-files` and ensure CI remains green.

### Part D — (Optional) Add notebook QA without executing them

* Add **nbqa** to run Ruff on notebooks (markdown & code cells):

  ```yaml
  # append to .pre-commit-config.yaml
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.8.5
    hooks:
      - id: nbqa-ruff
        args: [--fix]
        additional_dependencies: [ruff==0.5.0]
  ```
* Re‑install hooks and run `pre-commit run --all-files`.

---

## Reference checklist (for grading)

* `.pre-commit-config.yaml` present with **Black, Ruff, nbstripout**.
* `pyproject.toml` includes **\[tool.black]** and **\[tool.ruff]** sections.
* `.github/workflows/ci.yml` runs **pre‑commit** and **pytest** with **Python 3.11** and pip caching.
* `make lint`, `make test`, `make ci-local` work (if you added them).
* A PR was opened and CI is **green**; README has the **CI badge**.

---

## Instructor tips / gotchas

* If pre‑commit says “no files to check” for nbstripout, ensure your **file matcher** `files: \.ipynb$` is correct and that notebooks are tracked.
* If Ruff conflicts with Black on formatting: keep **Black** as the authority, disable `E501` in Ruff, and let Ruff handle **imports** (`I`) and errors (`E`, `F`).
* CI failures from missing deps: ensure your `requirements.txt` (or `pyproject.toml` with `[project.dependencies]`) includes **pandas**, **pyarrow**, and **pytest** if your tests read Parquet.
* Keep CI lean: no data downloads or training; use **fixtures** and tiny synthetic datasets (Session 13 pattern).

You now have an automated quality gate—**style, lint, and tests run locally and in CI**—so your future PRs start green and stay green.
