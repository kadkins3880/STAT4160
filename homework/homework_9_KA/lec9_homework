{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPfbRbCpcdDB8oz4EjalvfY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jx0hPMDqhY4F","executionInfo":{"status":"ok","timestamp":1760291403963,"user_tz":300,"elapsed":9270,"user":{"displayName":"Kincayde Adkins","userId":"06640678183636116981"}},"outputId":"1eaa7a94-5932-4e45-deb8-c6d1adb2c1ef"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","drive.mount('/content/drive', force_remount=True)"]},{"cell_type":"code","source":["REPO_OWNER = \"kadkins3\"\n","REPO_NAME  = \"STAT4160\"   # e.g., unified-stocks-team1\n","BASE_DIR   = \"/content/drive/MyDrive/dspt25\"\n","CLONE_DIR  = f\"{BASE_DIR}/{REPO_NAME}\"\n","REPO_URL   = f\"https://github.com/{REPO_OWNER}/{REPO_NAME}.git\"\n","\n","# if on my office computer\n","\n","# REPO_NAME  = \"lectureNotes\"   # e.g., on my office computer\n","# BASE_DIR = r\"E:\\OneDrive - Auburn University Montgomery\\teaching\\AUM\\STAT 4160 Productivity Tools\" # on my office computer\n","# CLONE_DIR  = f\"{BASE_DIR}\\{REPO_NAME}\"\n","\n","import os, pathlib\n","pathlib.Path(BASE_DIR).mkdir(parents=True, exist_ok=True)"],"metadata":{"id":"iUOyc--PhgQT","executionInfo":{"status":"ok","timestamp":1760291404142,"user_tz":300,"elapsed":181,"user":{"displayName":"Kincayde Adkins","userId":"06640678183636116981"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import os, subprocess, shutil, pathlib\n","\n","if not pathlib.Path(CLONE_DIR).exists():\n","    !git clone {REPO_URL} {CLONE_DIR}\n","else:\n","    # If the folder exists, just ensure it's a git repo and pull latest\n","    os.chdir(CLONE_DIR)\n","    # !git status\n","    # !git pull --rebase # !git pull --ff-only\n","os.chdir(CLONE_DIR)\n","print(\"Working dir:\", os.getcwd())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gLdbr2tUhiJt","executionInfo":{"status":"ok","timestamp":1760291404363,"user_tz":300,"elapsed":214,"user":{"displayName":"Kincayde Adkins","userId":"06640678183636116981"}},"outputId":"73837dec-9637-4d53-d3ae-f4894300e43c"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Working dir: /content/drive/MyDrive/dspt25/STAT4160\n"]}]},{"cell_type":"code","source":["import pandas as pd, numpy as np, pathlib\n","\n","# 1) Read the single-file Parquet you wrote in class\n","prices_path = \"data/processed/prices.parquet\"\n","assert pathlib.Path(prices_path).exists(), \"Missing processed/prices.parquet â€” finish the lab first.\"\n","\n","prices = pd.read_parquet(prices_path)\n","# If ticker was written as object, you can re-cast to category:\n","if prices[\"ticker\"].dtype != \"category\":\n","    prices[\"ticker\"] = prices[\"ticker\"].astype(\"category\")\n","\n","# 2) Sort and compute returns per ticker (no leakage)\n","prices = prices.sort_values([\"ticker\",\"date\"]).reset_index(drop=True)\n","\n","# Daily log return: log(adj_close_t / adj_close_{t-1})\n","prices[\"log_return\"] = (prices.groupby(\"ticker\")[\"adj_close\"]\n","                        .apply(lambda s: np.log(s / s.shift(1))).reset_index(level=0, drop=True))\n","\n","# Next-day return label r_1d = lead(log_return, 1)\n","prices[\"r_1d\"] = (prices.groupby(\"ticker\")[\"log_return\"]\n","                  .shift(-1))\n","\n","# 3) Calendar features\n","prices[\"weekday\"] = prices[\"date\"].dt.weekday.astype(\"int8\")  # 0..6\n","prices[\"month\"]   = prices[\"date\"].dt.month.astype(\"int8\")    # 1..12\n","\n","# 4) Select output columns & dtypes\n","out = prices[[\"date\",\"ticker\",\"log_return\",\"r_1d\",\"weekday\",\"month\"]].copy()\n","out[\"ticker\"] = out[\"ticker\"].astype(\"category\")\n","\n","# 5) Save to Parquet\n","out_path = \"data/processed/returns.parquet\"\n","out.to_parquet(out_path, engine=\"pyarrow\", compression=\"zstd\", index=False)\n","print(\"Wrote:\", out_path)\n","\n","# 6) (Optional) also write a partitioned dataset by ticker\n","part_dir = \"data/processed/returns_by_ticker\"\n","try:\n","    out.to_parquet(part_dir, engine=\"pyarrow\", compression=\"zstd\",\n","                   index=False, partition_cols=[\"ticker\"])\n","    print(\"Wrote partitioned dataset:\", part_dir)\n","except TypeError:\n","    import pyarrow as pa, pyarrow.parquet as pq\n","    pq.write_to_dataset(pa.Table.from_pandas(out, preserve_index=False),\n","                        root_path=part_dir, partition_cols=[\"ticker\"], compression=\"zstd\")\n","    print(\"Wrote (fallback) partitioned dataset:\", part_dir)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wm--9tlThptc","executionInfo":{"status":"ok","timestamp":1760291407748,"user_tz":300,"elapsed":3381,"user":{"displayName":"Kincayde Adkins","userId":"06640678183636116981"}},"outputId":"8f831c92-c581-4d76-cbe0-903555db0b2a"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-3219751429.py:16: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n","  prices[\"log_return\"] = (prices.groupby(\"ticker\")[\"adj_close\"]\n","/tmp/ipython-input-3219751429.py:20: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n","  prices[\"r_1d\"] = (prices.groupby(\"ticker\")[\"log_return\"]\n"]},{"output_type":"stream","name":"stdout","text":["Wrote: data/processed/returns.parquet\n","Wrote partitioned dataset: data/processed/returns_by_ticker\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","r = pd.read_parquet(\"data/processed/returns.parquet\")\n","assert {\"date\",\"ticker\",\"log_return\",\"r_1d\",\"weekday\",\"month\"}.issubset(r.columns)\n","assert r[\"ticker\"].dtype.name in (\"category\",\"CategoricalDtype\"), \"ticker should be categorical\"\n","print(\"rows:\", len(r), \"| tickers:\", r[\"ticker\"].nunique())\n","r.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"769uwALShs2Y","executionInfo":{"status":"ok","timestamp":1760291407862,"user_tz":300,"elapsed":110,"user":{"displayName":"Kincayde Adkins","userId":"06640678183636116981"}},"outputId":"6c275d4d-0402-4077-e066-05b6b290a2f9"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["rows: 36450 | tickers: 25\n"]},{"output_type":"execute_result","data":{"text/plain":["        date ticker  log_return      r_1d  weekday  month\n","0 2020-01-01   AAPL         NaN -0.002664        2      1\n","1 2020-01-02   AAPL   -0.002664 -0.010994        3      1\n","2 2020-01-03   AAPL   -0.010994  0.000840        4      1\n","3 2020-01-06   AAPL    0.000840 -0.002852        0      1\n","4 2020-01-07   AAPL   -0.002852  0.019694        1      1"],"text/html":["\n","  <div id=\"df-31786eac-f8d8-4f89-8633-e9ea47a11b90\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>ticker</th>\n","      <th>log_return</th>\n","      <th>r_1d</th>\n","      <th>weekday</th>\n","      <th>month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2020-01-01</td>\n","      <td>AAPL</td>\n","      <td>NaN</td>\n","      <td>-0.002664</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2020-01-02</td>\n","      <td>AAPL</td>\n","      <td>-0.002664</td>\n","      <td>-0.010994</td>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2020-01-03</td>\n","      <td>AAPL</td>\n","      <td>-0.010994</td>\n","      <td>0.000840</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2020-01-06</td>\n","      <td>AAPL</td>\n","      <td>0.000840</td>\n","      <td>-0.002852</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2020-01-07</td>\n","      <td>AAPL</td>\n","      <td>-0.002852</td>\n","      <td>0.019694</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31786eac-f8d8-4f89-8633-e9ea47a11b90')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-31786eac-f8d8-4f89-8633-e9ea47a11b90 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-31786eac-f8d8-4f89-8633-e9ea47a11b90');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-6c763c00-da73-44e7-921c-2049e30d513a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c763c00-da73-44e7-921c-2049e30d513a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-6c763c00-da73-44e7-921c-2049e30d513a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"r","summary":"{\n  \"name\": \"r\",\n  \"rows\": 36450,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-01-01 00:00:00\",\n        \"max\": \"2025-08-01 00:00:00\",\n        \"num_unique_values\": 1458,\n        \"samples\": [\n          \"2025-01-22 00:00:00\",\n          \"2023-03-16 00:00:00\",\n          \"2021-08-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ticker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"INTC\",\n          \"ORCL\",\n          \"AAPL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_return\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 34819,\n        \"samples\": [\n          0.0014873403124511242,\n          -0.007444725837558508,\n          -0.0034991856664419174\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r_1d\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 34819,\n        \"samples\": [\n          0.0014873403124511242,\n          -0.007444725837558508,\n          -0.0034991856664419174\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int8\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]}]}